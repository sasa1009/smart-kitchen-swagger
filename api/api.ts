/* tslint:disable */
/* eslint-disable */
/**
 * SMART KITCHEN API
 * SMART KITCHEN用API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ログイン中のユーザー情報のルートプロパティ
 * @export
 * @interface CurrentUserResponse
 */
export interface CurrentUserResponse {
    /**
     * 
     * @type {CurrentUserResponseUser}
     * @memberof CurrentUserResponse
     */
    'user': CurrentUserResponseUser;
}
/**
 * ログイン中のユーザー情報
 * @export
 * @interface CurrentUserResponseUser
 */
export interface CurrentUserResponseUser {
    /**
     * ユーザーID
     * @type {number}
     * @memberof CurrentUserResponseUser
     */
    'id': number;
    /**
     * ユーザーネーム
     * @type {string}
     * @memberof CurrentUserResponseUser
     */
    'name': string;
    /**
     * 一言コメント
     * @type {string}
     * @memberof CurrentUserResponseUser
     */
    'comment': string | null;
    /**
     * ユーザーの画像のURL
     * @type {string}
     * @memberof CurrentUserResponseUser
     */
    'image_url': string | null;
}

/**
 * CurrentUserApi - axios parameter creator
 * @export
 */
export const CurrentUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン中のユーザーの情報を取得
         * @summary ログインユーザー情報取得
         * @param {string} uid devise-token-auth用のuid
         * @param {string} accessToken devise-token-auth用のaccess-token
         * @param {string} client devise-token-auth用のclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (uid: string, accessToken: string, client: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getCurrentUser', 'uid', uid)
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('getCurrentUser', 'accessToken', accessToken)
            // verify required parameter 'client' is not null or undefined
            assertParamExists('getCurrentUser', 'client', client)
            const localVarPath = `/auth/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uid !== undefined && uid !== null) {
                localVarHeaderParameter['uid'] = String(uid);
            }

            if (accessToken !== undefined && accessToken !== null) {
                localVarHeaderParameter['access-token'] = String(accessToken);
            }

            if (client !== undefined && client !== null) {
                localVarHeaderParameter['client'] = String(client);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrentUserApi - functional programming interface
 * @export
 */
export const CurrentUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrentUserApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン中のユーザーの情報を取得
         * @summary ログインユーザー情報取得
         * @param {string} uid devise-token-auth用のuid
         * @param {string} accessToken devise-token-auth用のaccess-token
         * @param {string} client devise-token-auth用のclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(uid: string, accessToken: string, client: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(uid, accessToken, client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrentUserApi - factory interface
 * @export
 */
export const CurrentUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrentUserApiFp(configuration)
    return {
        /**
         * ログイン中のユーザーの情報を取得
         * @summary ログインユーザー情報取得
         * @param {string} uid devise-token-auth用のuid
         * @param {string} accessToken devise-token-auth用のaccess-token
         * @param {string} client devise-token-auth用のclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(uid: string, accessToken: string, client: string, options?: any): AxiosPromise<object> {
            return localVarFp.getCurrentUser(uid, accessToken, client, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CurrentUserApi - object-oriented interface
 * @export
 * @class CurrentUserApi
 * @extends {BaseAPI}
 */
export class CurrentUserApi extends BaseAPI {
    /**
     * ログイン中のユーザーの情報を取得
     * @summary ログインユーザー情報取得
     * @param {string} uid devise-token-auth用のuid
     * @param {string} accessToken devise-token-auth用のaccess-token
     * @param {string} client devise-token-auth用のclient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    public getCurrentUser(uid: string, accessToken: string, client: string, options?: AxiosRequestConfig) {
        return CurrentUserApiFp(this.configuration).getCurrentUser(uid, accessToken, client, options).then((request) => request(this.axios, this.basePath));
    }
}


